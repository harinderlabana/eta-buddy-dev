{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{logEvent}from\"./analytics\";// Import the logEvent function from analytics.js\nimport{useTable,useGlobalFilter}from\"react-table\";import{fetchCSVData}from\"./data\";import\"./DataTable.css\";// Import the custom CSS file\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function DataTable(){const[data,setData]=useState([]);const[searchQuery,setSearchQuery]=useState(\"\");useEffect(()=>{const fetchData=async()=>{const csvData=await fetchCSVData();setData(csvData);};fetchData();},[]);const columns=React.useMemo(()=>[// Define your column headers here\n// { Header: \"Order Number\", accessor: \"Order Number\" },\n{Header:\"Customer Name\",accessor:\"Customer Name\"},{Header:\"Status\",accessor:\"Status\"},{Header:\"VIN\",accessor:\"VIN\"},{Header:\"ETA From\",accessor:\"ETA From\"},{Header:\"ETA To\",accessor:\"ETA To\"},{Header:\"Year\",accessor:\"Model Year\"},{Header:\"Model\",accessor:\"Model\"},{Header:\"Suffix\",accessor:\"Suffix\"},{Header:\"Colour\",accessor:\"Colour\"}// Add more columns as needed\n],[]);const{getTableProps,getTableBodyProps,headerGroups,rows,prepareRow,setGlobalFilter}=useTable({columns,data},useGlobalFilter);const handleSearch=e=>{const query=e.target.value;setSearchQuery(query);setGlobalFilter(query);logEvent(\"Search\",\"Performed\");// Track the search event in Google Analytics\n};const clearSearch=()=>{setSearchQuery(\"\");logEvent(\"Search\",\"Cleared\");// Track the search event in Google Analytics\n};const filteredRows=searchQuery?rows.filter((row,index)=>index===0||row.isMatched):[];return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"search-container\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:searchQuery,onChange:handleSearch,placeholder:\"Type your Order Number or Customer Name...\",className:\"search-input\"})}),searchQuery&&filteredRows.length>0?/*#__PURE__*/_jsxs(\"table\",{...getTableProps(),style:{width:\"100%\"},children:[/*#__PURE__*/_jsx(\"thead\",{children:headerGroups.map(headerGroup=>/*#__PURE__*/_jsx(\"tr\",{...headerGroup.getHeaderGroupProps(),children:headerGroup.headers.map(column=>/*#__PURE__*/_jsx(\"th\",{...column.getHeaderProps(),children:column.render(\"Header\")}))}))}),/*#__PURE__*/_jsx(\"tbody\",{...getTableBodyProps(),children:filteredRows.map(row=>{prepareRow(row);return/*#__PURE__*/_jsx(\"tr\",{...row.getRowProps(),children:row.cells.map(cell=>/*#__PURE__*/_jsx(\"td\",{...cell.getCellProps(),children:cell.render(\"Cell\")}))});})})]}):searchQuery&&/*#__PURE__*/_jsx(\"p\",{className:\"no-results\",children:\"Your order may be \\\"Pending Fullfilment\\\". Verify that your search is entered correctly.\"})]});}","map":{"version":3,"names":["React","useEffect","useState","logEvent","useTable","useGlobalFilter","fetchCSVData","jsx","_jsx","jsxs","_jsxs","DataTable","data","setData","searchQuery","setSearchQuery","fetchData","csvData","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setGlobalFilter","handleSearch","e","query","target","value","clearSearch","filteredRows","filter","row","index","isMatched","children","className","type","onChange","placeholder","length","style","width","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps"],"sources":["/Users/harinderlabana/Code/eta-buddy-dev/src/DataTable.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { logEvent } from \"./analytics\"; // Import the logEvent function from analytics.js\nimport { useTable, useGlobalFilter } from \"react-table\";\nimport { fetchCSVData } from \"./data\";\nimport \"./DataTable.css\"; // Import the custom CSS file\n\nexport default function DataTable() {\n  const [data, setData] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const csvData = await fetchCSVData();\n      setData(csvData);\n    };\n    fetchData();\n  }, []);\n\n  const columns = React.useMemo(\n    () => [\n      // Define your column headers here\n      // { Header: \"Order Number\", accessor: \"Order Number\" },\n      { Header: \"Customer Name\", accessor: \"Customer Name\" },\n      { Header: \"Status\", accessor: \"Status\" },\n      { Header: \"VIN\", accessor: \"VIN\" },\n      { Header: \"ETA From\", accessor: \"ETA From\" },\n      { Header: \"ETA To\", accessor: \"ETA To\" },\n      { Header: \"Year\", accessor: \"Model Year\" },\n      { Header: \"Model\", accessor: \"Model\" },\n      { Header: \"Suffix\", accessor: \"Suffix\" },\n      { Header: \"Colour\", accessor: \"Colour\" },\n      // Add more columns as needed\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n  } = useTable({ columns, data }, useGlobalFilter);\n\n  const handleSearch = (e) => {\n    const query = e.target.value;\n    setSearchQuery(query);\n    setGlobalFilter(query);\n    logEvent(\"Search\", \"Performed\"); // Track the search event in Google Analytics\n  };\n\n  const clearSearch = () => {\n    setSearchQuery(\"\");\n    logEvent(\"Search\", \"Cleared\"); // Track the search event in Google Analytics\n  };\n\n  const filteredRows = searchQuery\n    ? rows.filter((row, index) => index === 0 || row.isMatched)\n    : [];\n\n  return (\n    <div>\n      <div className=\"search-container\">\n        <input\n          type=\"text\"\n          value={searchQuery}\n          onChange={handleSearch}\n          placeholder=\"Type your Order Number or Customer Name...\"\n          className=\"search-input\"\n        />\n      </div>\n      {searchQuery && filteredRows.length > 0 ? (\n        <table {...getTableProps()} style={{ width: \"100%\" }}>\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps()}>\n                    {column.render(\"Header\")}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {filteredRows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  ))}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      ) : (\n        searchQuery && (\n          <p className=\"no-results\">\n            Your order may be \"Pending Fullfilment\". Verify that your search is\n            entered correctly.\n          </p>\n        )\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}