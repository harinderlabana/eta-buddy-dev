{"ast":null,"code":"var _jsxFileName = \"/Users/harinderlabana/Code/eta-buddy-dev/src/DataTable2.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useTable } from \"react-table\";\nimport { fetchCSVData2 } from \"./data2\";\nimport \"./DataTable.css\"; // Import the custom CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DataTable2() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const csvData = await fetchCSVData2();\n      setData(csvData);\n    };\n    fetchData();\n  }, []);\n  const columns = useMemo(() => [{\n    Header: \"Deal Number\",\n    accessor: \"deal\"\n  }\n  /*     { Header: \"Status\", accessor: \"Status\" },\n  { Header: \"ETA From\", accessor: \"ETA From\" },\n  { Header: \"ETA To\", accessor: \"ETA To\" },\n  { Header: \"Year\", accessor: \"Model Year\" },\n  { Header: \"Model\", accessor: \"Model\" },\n  { Header: \"Suffix\", accessor: \"Suffix\" },\n  { Header: \"Colour\", accessor: \"Colour\" },\n  */], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      className: \"datatable\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(DataTable2, \"YhGWXwjULbyufFhAsvks/rWG56U=\", false, function () {\n  return [useTable];\n});\n_c = DataTable2;\nvar _c;\n$RefreshReg$(_c, \"DataTable2\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","useTable","fetchCSVData2","jsxDEV","_jsxDEV","DataTable2","_s","data","setData","fetchData","csvData","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","children","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","fileName","_jsxFileName","lineNumber","columnNumber","row","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["/Users/harinderlabana/Code/eta-buddy-dev/src/DataTable2.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { useTable } from \"react-table\";\nimport { fetchCSVData2 } from \"./data2\";\nimport \"./DataTable.css\"; // Import the custom CSS file\n\nexport default function DataTable2() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const csvData = await fetchCSVData2();\n      setData(csvData);\n    };\n    fetchData();\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      { Header: \"Deal Number\", accessor: \"deal\" },\n      /*     { Header: \"Status\", accessor: \"Status\" },\n      { Header: \"ETA From\", accessor: \"ETA From\" },\n      { Header: \"ETA To\", accessor: \"ETA To\" },\n      { Header: \"Year\", accessor: \"Model Year\" },\n      { Header: \"Model\", accessor: \"Model\" },\n      { Header: \"Suffix\", accessor: \"Suffix\" },\n      { Header: \"Colour\", accessor: \"Colour\" },\n      */\n    ],\n    []\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({ columns, data });\n\n  return (\n    <div>\n      <table {...getTableProps()} className=\"datatable\">\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => (\n                  <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,aAAa,QAAQ,SAAS;AACvC,OAAO,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCF,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,OAAO,GAAG,MAAMR,aAAa,CAAC,CAAC;MACrCM,OAAO,CAACE,OAAO,CAAC;IAClB,CAAC;IACDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,OAAO,GAAGZ,OAAO,CACrB,MAAM,CACJ;IAAEa,MAAM,EAAE,aAAa;IAAEC,QAAQ,EAAE;EAAO;EAC1C;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAPM,CAQD,EACD,EACF,CAAC;EAED,MAAM;IAAEC,aAAa;IAAEC,iBAAiB;IAAEC,YAAY;IAAEC,IAAI;IAAEC;EAAW,CAAC,GACxEjB,QAAQ,CAAC;IAAEU,OAAO;IAAEJ;EAAK,CAAC,CAAC;EAE7B,oBACEH,OAAA;IAAAe,QAAA,eACEf,OAAA;MAAA,GAAWU,aAAa,CAAC,CAAC;MAAEM,SAAS,EAAC,WAAW;MAAAD,QAAA,gBAC/Cf,OAAA;QAAAe,QAAA,EACGH,YAAY,CAACK,GAAG,CAAEC,WAAW,iBAC5BlB,OAAA;UAAA,GAAQkB,WAAW,CAACC,mBAAmB,CAAC,CAAC;UAAAJ,QAAA,EACtCG,WAAW,CAACE,OAAO,CAACH,GAAG,CAAEI,MAAM,iBAC9BrB,OAAA;YAAA,GAAQqB,MAAM,CAACC,cAAc,CAAC,CAAC;YAAAP,QAAA,EAAGM,MAAM,CAACE,MAAM,CAAC,QAAQ;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAC/D;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACR3B,OAAA;QAAA,GAAWW,iBAAiB,CAAC,CAAC;QAAAI,QAAA,EAC3BF,IAAI,CAACI,GAAG,CAAEW,GAAG,IAAK;UACjBd,UAAU,CAACc,GAAG,CAAC;UACf,oBACE5B,OAAA;YAAA,GAAQ4B,GAAG,CAACC,WAAW,CAAC,CAAC;YAAAd,QAAA,EACtBa,GAAG,CAACE,KAAK,CAACb,GAAG,CAAEc,IAAI,iBAClB/B,OAAA;cAAA,GAAQ+B,IAAI,CAACC,YAAY,CAAC,CAAC;cAAAjB,QAAA,EAAGgB,IAAI,CAACR,MAAM,CAAC,MAAM;YAAC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CACvD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAET,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACzB,EAAA,CAxDuBD,UAAU;EAAA,QA2B9BJ,QAAQ;AAAA;AAAAoC,EAAA,GA3BYhC,UAAU;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}